'use client';

import { motion } from 'framer-motion';
import { 
  Download, 
  Save, 
  FileText, 
  Share2, 
  Printer,
  Mail,
  CheckCircle,
  Loader2
} from 'lucide-react';
import { useState } from 'react';

interface ReportData {
  cropType: string;
  analysisDate: string;
  diagnosis: {
    disease: string;
    severity: string;
    confidence: number;
  };
  treatment: {
    type: string;
    recommendations: string[];
  };
  healthMetrics: {
    healthy: number;
    infected: number;
  };
}

interface SaveReportButtonProps {
  reportData: ReportData;
  onSave?: () => void;
}

export function SaveReportButton({ reportData, onSave }: SaveReportButtonProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSaved, setIsSaved] = useState(false);
  const [showOptions, setShowOptions] = useState(false);

  const handleSaveReport = async (format: 'pdf' | 'json' | 'email' | 'print') => {
    setIsGenerating(true);
    
    try {
      // Simulate report generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      switch (format) {
        case 'pdf':
          // Generate PDF report
          const pdfContent = generatePDFContent();
          downloadFile(pdfContent, `pest-disease-report-${reportData.analysisDate}.pdf`, 'application/pdf');
          break;
        
        case 'json':
          // Export as JSON
          const jsonContent = JSON.stringify(reportData, null, 2);
          downloadFile(jsonContent, `pest-disease-data-${reportData.analysisDate}.json`, 'application/json');
          break;
        
        case 'email':
          // Email report (simulate)
          console.log('Sending email report...', reportData);
          break;
        
        case 'print':
          // Print report
          window.print();
          break;
      }
      
      setIsSaved(true);
      onSave?.();
      
      // Reset saved state after 3 seconds
      setTimeout(() => {
        setIsSaved(false);
      }, 3000);
      
    } catch (error) {
      console.error('Error generating report:', error);
    } finally {
      setIsGenerating(false);
      setShowOptions(false);
    }
  };

  const generatePDFContent = () => {
    return `
      AgriWise Pest & Disease Detection Report
      
      Crop Type: ${reportData.cropType}
      Analysis Date: ${reportData.analysisDate}
      
      DIAGNOSIS:
      Disease: ${reportData.diagnosis.disease}
      Severity: ${reportData.diagnosis.severity}
      Confidence: ${reportData.diagnosis.confidence}%
      
      TREATMENT RECOMMENDATIONS:
      Type: ${reportData.treatment.type}
      ${reportData.treatment.recommendations.map(rec => `- ${rec}`).join('\n')}
      
      HEALTH METRICS:
      Healthy: ${reportData.healthMetrics.healthy}%
      Infected: ${reportData.healthMetrics.infected}%
      
      Generated by AgriWise Smart Crop Advisory System
    `;
  };

  const downloadFile = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="relative">
      {/* Main Save Button */}
      <motion.button
        className={`
          liquid-glass-button group relative overflow-hidden px-6 py-3 rounded-xl
          ${isSaved 
            ? 'bg-gradient-to-r from-green-500/20 to-emerald-500/20 border-green-400/50' 
            : 'bg-gradient-to-r from-blue-500/20 to-purple-500/20 border-blue-400/50'
          }
          border transition-all duration-300
          ${isGenerating ? 'opacity-75 cursor-not-allowed' : 'hover:shadow-lg hover:shadow-blue-500/25'}
        `}
        onClick={() => !isGenerating && setShowOptions(!showOptions)}
        disabled={isGenerating}
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
      >
        {/* Animated Background */}
        <motion.div
          className="absolute inset-0 bg-gradient-to-r from-blue-600/10 to-purple-600/10"
          animate={{
            x: isGenerating ? [0, 100, 0] : 0,
          }}
          transition={{
            duration: 2,
            repeat: isGenerating ? Infinity : 0,
            ease: "linear",
          }}
        />

        <div className="relative flex items-center gap-3">
          {isGenerating ? (
            <Loader2 className="animate-spin text-blue-400" size={20} />
          ) : isSaved ? (
            <CheckCircle className="text-green-400" size={20} />
          ) : (
            <Save className="text-blue-400 group-hover:text-blue-300 transition-colors" size={20} />
          )}
          
          <span className="font-semibold text-gray-100">
            {isGenerating ? 'Generating Report...' : isSaved ? 'Report Saved!' : 'Save Report'}
          </span>
        </div>

        {/* Glow Effect */}
        <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-blue-500/20 to-purple-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-xl" />
      </motion.button>

      {/* Options Dropdown */}
      {showOptions && !isGenerating && (
        <motion.div
          className="absolute top-full left-0 mt-2 w-64 glassmorphism-dark rounded-xl border border-gray-700/50 shadow-2xl z-50"
          initial={{ opacity: 0, y: -10, scale: 0.95 }}
          animate={{ opacity: 1, y: 0, scale: 1 }}
          exit={{ opacity: 0, y: -10, scale: 0.95 }}
          transition={{ duration: 0.2 }}
        >
          <div className="p-2">
            <div className="text-sm text-gray-400 px-3 py-2 border-b border-gray-700/50">
              Choose Export Format
            </div>
            
            <div className="space-y-1 pt-2">
              {/* PDF Export */}
              <motion.button
                className="w-full flex items-center gap-3 px-3 py-2 text-left hover:bg-gray-800/50 rounded-lg transition-colors group"
                onClick={() => handleSaveReport('pdf')}
                whileHover={{ x: 4 }}
              >
                <FileText className="text-red-400 group-hover:text-red-300" size={18} />
                <div>
                  <div className="text-gray-100 font-medium">PDF Report</div>
                  <div className="text-xs text-gray-400">Comprehensive analysis document</div>
                </div>
              </motion.button>

              {/* JSON Export */}
              <motion.button
                className="w-full flex items-center gap-3 px-3 py-2 text-left hover:bg-gray-800/50 rounded-lg transition-colors group"
                onClick={() => handleSaveReport('json')}
                whileHover={{ x: 4 }}
              >
                <Download className="text-blue-400 group-hover:text-blue-300" size={18} />
                <div>
                  <div className="text-gray-100 font-medium">Raw Data</div>
                  <div className="text-xs text-gray-400">JSON format for developers</div>
                </div>
              </motion.button>

              {/* Email Report */}
              <motion.button
                className="w-full flex items-center gap-3 px-3 py-2 text-left hover:bg-gray-800/50 rounded-lg transition-colors group"
                onClick={() => handleSaveReport('email')}
                whileHover={{ x: 4 }}
              >
                <Mail className="text-green-400 group-hover:text-green-300" size={18} />
                <div>
                  <div className="text-gray-100 font-medium">Email Report</div>
                  <div className="text-xs text-gray-400">Send to your inbox</div>
                </div>
              </motion.button>

              {/* Print */}
              <motion.button
                className="w-full flex items-center gap-3 px-3 py-2 text-left hover:bg-gray-800/50 rounded-lg transition-colors group"
                onClick={() => handleSaveReport('print')}
                whileHover={{ x: 4 }}
              >
                <Printer className="text-purple-400 group-hover:text-purple-300" size={18} />
                <div>
                  <div className="text-gray-100 font-medium">Print Report</div>
                  <div className="text-xs text-gray-400">Physical copy</div>
                </div>
              </motion.button>
            </div>

            {/* Share Section */}
            <div className="border-t border-gray-700/50 mt-2 pt-2">
              <motion.button
                className="w-full flex items-center gap-3 px-3 py-2 text-left hover:bg-gray-800/50 rounded-lg transition-colors group"
                whileHover={{ x: 4 }}
              >
                <Share2 className="text-amber-400 group-hover:text-amber-300" size={18} />
                <div>
                  <div className="text-gray-100 font-medium">Share Report</div>
                  <div className="text-xs text-gray-400">Social media & messaging</div>
                </div>
              </motion.button>
            </div>
          </div>
        </motion.div>
      )}

      {/* Click Outside Overlay */}
      {showOptions && (
        <div 
          className="fixed inset-0 z-40" 
          onClick={() => setShowOptions(false)}
        />
      )}
    </div>
  );
}