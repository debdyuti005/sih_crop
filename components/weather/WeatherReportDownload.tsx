'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Download, 
  FileText, 
  Calendar, 
  MapPin, 
  Loader2, 
  CheckCircle,
  Settings,
  Smartphone,
  Printer
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Checkbox } from '@/components/ui/checkbox';

interface WeatherData {
  location: string;
  temperature: number;
  humidity: number;
  windSpeed: number;
  rainfall: number;
}

interface WeatherReportDownloadProps {
  weatherData: WeatherData;
  insights: Array<{
    title: string;
    description: string;
    confidence: number;
  }>;
  alerts: Array<{
    type: string;
    severity: 'low' | 'medium' | 'high';
    title: string;
    description: string;
  }>;
}

const REPORT_SECTIONS = [
  { id: 'overview', label: 'Weather Overview', icon: FileText },
  { id: 'forecast', label: '7-Day Forecast', icon: Calendar },
  { id: 'insights', label: 'AI Insights & Recommendations', icon: Settings },
  { id: 'alerts', label: 'Weather Alerts', icon: Smartphone },
  { id: 'charts', label: 'Charts & Graphs', icon: Printer },
];

export function WeatherReportDownload({ 
  weatherData, 
  insights, 
  alerts 
}: WeatherReportDownloadProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [isDownloaded, setIsDownloaded] = useState(false);
  const [selectedSections, setSelectedSections] = useState(['overview', 'forecast', 'insights']);
  const [reportFormat, setReportFormat] = useState<'pdf' | 'mobile'>('pdf');

  const handleDownload = async () => {
    setIsGenerating(true);
    
    try {
      // Simulate PDF generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Generate mock PDF content
      const reportContent = generateReportContent();
      
      // Create blob and download
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `weather-report-${weatherData.location.replace(/[^a-zA-Z0-9]/g, '-')}-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      setIsDownloaded(true);
      setTimeout(() => setIsDownloaded(false), 3000);
    } catch (error) {
      console.error('Download failed:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const generateReportContent = () => {
    const date = new Date().toLocaleDateString();
    let content = `AGRIWISE WEATHER INTELLIGENCE REPORT\n`;
    content += `Generated on: ${date}\n`;
    content += `Location: ${weatherData.location}\n\n`;

    if (selectedSections.includes('overview')) {
      content += `CURRENT WEATHER OVERVIEW\n`;
      content += `========================\n`;
      content += `Temperature: ${weatherData.temperature}Â°C\n`;
      content += `Humidity: ${weatherData.humidity}%\n`;
      content += `Wind Speed: ${weatherData.windSpeed} km/h\n`;
      content += `Rainfall: ${weatherData.rainfall}mm\n\n`;
    }

    if (selectedSections.includes('insights')) {
      content += `AI INSIGHTS & RECOMMENDATIONS\n`;
      content += `============================\n`;
      insights.forEach((insight, index) => {
        content += `${index + 1}. ${insight.title}\n`;
        content += `   ${insight.description}\n`;
        content += `   Confidence: ${insight.confidence}%\n\n`;
      });
    }

    if (selectedSections.includes('alerts')) {
      content += `WEATHER ALERTS\n`;
      content += `==============\n`;
      alerts.forEach((alert, index) => {
        content += `${index + 1}. [${alert.severity.toUpperCase()}] ${alert.title}\n`;
        content += `   ${alert.description}\n\n`;
      });
    }

    content += `\nGenerated by AgriWise Smart Crop Advisory System\n`;
    content += `For more information, visit our platform.`;

    return content;
  };

  const toggleSection = (sectionId: string) => {
    setSelectedSections(prev =>
      prev.includes(sectionId)
        ? prev.filter(id => id !== sectionId)
        : [...prev, sectionId]
    );
  };

  return (
    <Card className="glassmorphism-dark border-white/20 p-6">
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center gap-3">
          <div className="p-2 bg-blue-500/20 rounded-lg">
            <Download className="w-5 h-5 text-blue-400" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-white">Download Weather Report</h3>
            <p className="text-sm text-gray-400">
              Export comprehensive weather data and insights
            </p>
          </div>
        </div>

        {/* Report Format Selection */}
        <div className="space-y-3">
          <h4 className="text-sm font-medium text-white">Report Format</h4>
          <div className="flex gap-3">
            <Button
              variant={reportFormat === 'pdf' ? 'default' : 'outline'}
              onClick={() => setReportFormat('pdf')}
              className={reportFormat === 'pdf' 
                ? 'bg-blue-600/20 border-blue-500/50 text-blue-300' 
                : 'liquid-glass-dark border-white/20 text-white hover:bg-white/10'
              }
            >
              <FileText className="w-4 h-4 mr-2" />
              Detailed PDF
            </Button>
            <Button
              variant={reportFormat === 'mobile' ? 'default' : 'outline'}
              onClick={() => setReportFormat('mobile')}
              className={reportFormat === 'mobile' 
                ? 'bg-blue-600/20 border-blue-500/50 text-blue-300' 
                : 'liquid-glass-dark border-white/20 text-white hover:bg-white/10'
              }
            >
              <Smartphone className="w-4 h-4 mr-2" />
              Mobile Summary
            </Button>
          </div>
        </div>

        {/* Section Selection */}
        <div className="space-y-3">
          <h4 className="text-sm font-medium text-white">Include Sections</h4>
          <div className="space-y-2">
            {REPORT_SECTIONS.map((section) => (
              <motion.div
                key={section.id}
                className="flex items-center space-x-3 p-3 rounded-lg hover:bg-white/5 transition-colors"
                whileHover={{ x: 5 }}
                whileTap={{ scale: 0.98 }}
              >
                <Checkbox
                  id={section.id}
                  checked={selectedSections.includes(section.id)}
                  onCheckedChange={() => toggleSection(section.id)}
                  className="border-white/30"
                />
                <div className="flex items-center gap-2 flex-1">
                  <section.icon className="w-4 h-4 text-gray-400" />
                  <label
                    htmlFor={section.id}
                    className="text-sm text-white cursor-pointer"
                  >
                    {section.label}
                  </label>
                </div>
              </motion.div>
            ))}
          </div>
        </div>

        {/* Current Location Info */}
        <div className="glassmorphism-dark border border-white/10 rounded-lg p-4">
          <div className="flex items-center gap-2 text-sm text-gray-300">
            <MapPin className="w-4 h-4" />
            <span>Report for: {weatherData.location}</span>
          </div>
          <div className="flex items-center gap-2 text-sm text-gray-400 mt-1">
            <Calendar className="w-4 h-4" />
            <span>Generated on: {new Date().toLocaleDateString()}</span>
          </div>
        </div>

        {/* Download Button */}
        <motion.div
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          <Button
            onClick={handleDownload}
            disabled={isGenerating || selectedSections.length === 0}
            className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white border-0 h-12 text-base font-medium glow-effect-dark"
          >
            {isGenerating ? (
              <>
                <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                Generating Report...
              </>
            ) : isDownloaded ? (
              <>
                <CheckCircle className="w-5 h-5 mr-2" />
                Downloaded Successfully!
              </>
            ) : (
              <>
                <Download className="w-5 h-5 mr-2" />
                Download {reportFormat === 'pdf' ? 'PDF' : 'Mobile'} Report
              </>
            )}
          </Button>
        </motion.div>

        {/* Info Text */}
        <div className="text-xs text-gray-400 text-center space-y-1">
          <p>Report includes selected weather data, forecasts, and AI recommendations</p>
          <p>Perfect for offline access and sharing with agricultural consultants</p>
        </div>
      </div>
    </Card>
  );
}